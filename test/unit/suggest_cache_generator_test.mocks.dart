// Mocks generated by Mockito 5.4.4 from annotations
// in suggest_cache_demo/test/unit/suggest_cache_generator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:suggest_cache_demo/models/suggest_item.dart' as _i5;
import 'package:suggest_cache_demo/services/api_service.dart' as _i6;
import 'package:suggest_cache_demo/services/local_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalService extends _i1.Mock implements _i3.LocalService {
  MockLocalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveStockMaster(String? data) => (super.noSuchMethod(
        Invocation.method(
          #saveStockMaster,
          [data],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getStockMaster() => (super.noSuchMethod(
        Invocation.method(
          #getStockMaster,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> saveSuggestDictionary(String? data) => (super.noSuchMethod(
        Invocation.method(
          #saveSuggestDictionary,
          [data],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getSuggestDictionary() => (super.noSuchMethod(
        Invocation.method(
          #getSuggestDictionary,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> saveStockMasterHash(String? hash) => (super.noSuchMethod(
        Invocation.method(
          #saveStockMasterHash,
          [hash],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getStockMasterHash() => (super.noSuchMethod(
        Invocation.method(
          #getStockMasterHash,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> saveSuggestHash(String? hash) => (super.noSuchMethod(
        Invocation.method(
          #saveSuggestHash,
          [hash],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getSuggestHash() => (super.noSuchMethod(
        Invocation.method(
          #getSuggestHash,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> saveSuggestCache(List<_i5.SuggestItem>? suggestCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSuggestCache,
          [suggestCache],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.SuggestItem>?> getSuggestCache() => (super.noSuchMethod(
        Invocation.method(
          #getSuggestCache,
          [],
        ),
        returnValue: _i4.Future<List<_i5.SuggestItem>?>.value(),
      ) as _i4.Future<List<_i5.SuggestItem>?>);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i6.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  bool get useMockData => (super.noSuchMethod(
        Invocation.getter(#useMockData),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<_i2.Response> getStockMaster(String? hash) => (super.noSuchMethod(
        Invocation.method(
          #getStockMaster,
          [hash],
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getStockMaster,
            [hash],
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> getSuggestDictionary(String? hash) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSuggestDictionary,
          [hash],
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getSuggestDictionary,
            [hash],
          ),
        )),
      ) as _i4.Future<_i2.Response>);
}
